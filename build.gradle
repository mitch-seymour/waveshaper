plugins {
  id "java-library"

  // for running the Demo app
  id "application"

  // for publishing the artifact to maven central
  id "maven-publish"

  // for signing the artifact when publishing to maven central
  id "signing"

  // https://plugins.gradle.org/plugin/com.jfrog.artifactory
  id "com.jfrog.artifactory" version "5.2.5"

  // https://plugins.gradle.org/plugin/com.palantir.baseline
  //id "com.palantir.baseline" version "5.64.0"

  // https://plugins.gradle.org/plugin/com.palantir.java-format
  //id "com.palantir.java-format" version "2.50.0"

  // https://plugins.gradle.org/plugin/net.ltgt.errorprone
  id 'net.ltgt.errorprone' version "4.0.1"
}

repositories {
  mavenCentral()
}

sourceCompatibility = '17'
targetCompatibility = '17'

ext {
  // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
  errorProneCoreVersion = "2.30.0"

  // https://mvnrepository.com/artifact/com.google.errorprone/javac
  // required for Java 8 support
  errorProneJavacVersion = "9+181-r4173-1"

  // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
  junitVersion = "5.3.2"

  // https://search.maven.org/artifact/com.google.guava/guava
  guavaVersion = "33.3.0-jre"
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:${errorProneCoreVersion}"
  errorproneJavac "com.google.errorprone:javac:${errorProneJavacVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

  implementation "com.google.guava:guava:${guavaVersion}"
}

tasks.withType(JavaCompile).configureEach { javaCompile ->
  //javaCompile.dependsOn "googleJavaFormat"
  options.encoding = 'UTF-8'
  options.errorprone {
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/build/generated/.*"
  }
}

test {
  useJUnitPlatform()
}

run {
  // Enable human friendly logging
  systemProperty "LOCAL", "local"
}

/** Examples */
sourceSets {
    examples {
        java {
            srcDir 'src/examples/java'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    examplesImplementation.extendsFrom implementation
}

task compileExamples(type: JavaCompile) {
    source = sourceSets.examples.java
    classpath = sourceSets.main.compileClasspath + sourceSets.examples.compileClasspath
    destinationDir = sourceSets.examples.output.classesDirs.singleFile
}

task runDemo1(type: JavaExec) {
    dependsOn compileExamples
    mainClass = 'io.waveshaper.Demo' // Make sure this matches your example class name
    classpath = sourceSets.main.runtimeClasspath + sourceSets.examples.runtimeClasspath
}
// end examples

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'waveshaper'
      groupId 'io.waveshaper'
      version '0.1.3'
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom {
        name = 'Waveshaper'
        description = 'A library for load testing with synthetic waveforms'
        url = 'https://github.com/mitch-seymour/waveshaper'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'mitch-seymour'
            name = 'Mitch Seymour'
            email = 'mitchseymour@gmail.com'
          }
        }
        scm {
            connection = 'scm:git:git://github.com/mitch-seymour/waveshaper.git'
            developerConnection = 'scm:git:ssh://git@github.com:mitch-seymour/waveshaper.git'
            url = 'https://github.com/mitch-seymour/waveshaper'
        }
      }
    }
  }
  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username = findProperty("ossrhToken") as String
        password = findProperty("ossrhTokenPassword") as String
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}


javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

